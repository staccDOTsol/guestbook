{"version":3,"sources":["utils.ts","config.js","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toDate","value","Date","toNumber","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","anchor","PublicKey","CONTRACT_NAME","module","exports","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyPath","masterAccount","Error","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","gatewayStatus","requestGatewayToken","useState","clicked","setClicked","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","onClick","a","variant","CircularProgress","NFT","div","ul","WalletMultiButton","Paper","MintButtonContainer","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BOATLOAD_OF_GAS","LinearProgress","Big","times","toFixed","Home","props","BN","setBalance","setIsMinting","isActive","totalSupply","price","priceLabel","whitelistPrice","whitelistEnabled","whitelistTokenBalance","setIsEnded","endDate","open","message","severity","undefined","alertState","setAlertState","mintOne","toks","near","contract","mint","startMint","quantityString","msg","code","indexOf","elevation","label","src","alt","now","getTime","date","onMount","completed","onComplete","renderer","days","hours","minutes","Snackbar","autoHideDuration","onClose","Alert","require","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","nearConfig","getConfig","keyStore","nearAPI","BrowserLocalStorageKeyStore","walletConnection","getAccountId","account","state","amount","currentUser","accountId","balance","viewMethods","changeMethods","sender","App","initContract","then","ThemeProvider","wallet","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dac0f84.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","const CONTRACT_NAME = 'f3d.near'; /* TODO: fill this in! */\n\nfunction getConfig (env) {\n  switch (env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.mainnet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      }\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      }\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      }\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `/Users/jarettdunn/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      }\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      }\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      }\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)\n  }\n}\n\nmodule.exports = getConfig\n","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\nisMinting\n                           }: {\n    onMint: (quantityString: number) => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint(1);\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked \n            }\n            onClick={async () => {\n               \n                    console.log('Minting...');\n                    await onMint(1);\n            }}\n            variant=\"contained\"\n        >\n\n                    {isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"Gib Near Get f3d\"\n                    )\n           }\n        </CTAButton>\n    );\n};\n","import {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport BN from 'bn.js';\nimport confetti from \"canvas-confetti\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {toDate, AlertState, getAtaForMint} from './utils';\nimport {MintButton} from './MintButton';\n\nimport 'regenerator-runtime/runtime';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color:var(--main-text-color) !important;\n  \n  > div.MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nexport interface HomeProps {\n    contract: any;\n    currentUser: any;\n    nearConfig: any; \n    wallet: any;\n}\n\nconst Home = (props: HomeProps) => {\n    const [ending, setEnding] = useState<BN>(new BN(1));\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [totalSupply, setTotalSupply] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n/*\n            settotalSupply(cndy.state.totalSupply);\n            setItemsRemaining(cndy.state.itemsRemaining);\n            setItemsRedeemed(cndy.state.itemsRedeemed);\n*/\n            var divider = 1;\n\n            // detect if using spl-token to mint\n                setPayWithSplToken(true);\n                // Customize your SPL-TOKEN Label HERE\n                // TODO: get spl-token metadata name\n                setPriceLabel(\"f3d\");\n                setPrice(0.138);\n\n\n            // end the mint when date is reached\n            if (true) {\n                setEndDate(toDate(ending));\n                if (\n                    ending.toNumber() <\n                    new Date().getTime() / 1000\n                ) {\n                    setIsEnded(true);\n                    setIsActive(false);\n                }\n            }\n        })();\n    };\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes+1) + \" minutes left to MINT.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\n        let remaining = itemsRemaining - qty;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - qty;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setItemsRedeemed(itemsRedeemed + qty);\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\n        }\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    function sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n\n    async function mintOne(toks: number) {\n        if (true) {\n            const near = toks / 0.138;\n            props.contract.mint(\n                { },\n                BOATLOAD_OF_GAS,\n                Big(near).times(10 ** 24).toFixed()\n            \n               )\n        }\n    }\n\n    const startMint = async (quantityString: number) => {\n        try {\n            setIsMinting(true);\n            await mintOne(quantityString);\n            \n        } catch (error: any) {\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n\n    useEffect(() => {\n        (async () => {\n            const supply = await props.contract.totalSupply()\n            setBalance(totalSupply);\n        \n        })();\n    }, []);\n\n\n\n    return (\n        <main>\n            <MainContainer>\n                \n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>My NFT</h2>\n                            <br/>\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\n                                src=\"cool-cats.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                        {endDate && Date.now() < endDate.getTime() &&\n                        // @ts-ignore\n                              <Countdown\n                                date={endDate}\n                                onMount={({completed}) => completed && setIsEnded(true)}\n                                onComplete={() => {\n                                    setIsEnded(true);\n                                }}\n                                renderer={renderEndDateCounter}\n                              />}\n                              <h3>TOTAL SUPPLY : {totalSupply}</h3>\n\n                            <br/>\n                            <MintButtonContainer>\n                                { true && \n                                // @ts-ignore\n                                                <MintButton\n                                                    isMinting={isMinting}\n\n                                                    onMint={startMint}\n                                                />\n                                }\n                            </MintButtonContainer>\n                            <br/>\n\n                        </NFT>\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nimport ReactDOM from 'react-dom';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\n// Initializing contract\nasync function initContract() {\n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig('mainnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  // @ts-ignore\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  // @ts-ignore\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: ['totalSupply', 'balanceOf', 'howLong', 'allowance', 'getCountDown','getwinner', 'getWinBet'],\n      changeMethods: ['init', 'transfer', 'approve', 'transferFrom', 'becomeWinner', 'withdraw', 'mint'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      // @ts-ignore\n      sender: walletConnection.getAccountId(),\n    }\n  );\n  return { contract, currentUser, nearConfig, walletConnection };\n}\n\n\n\nconst App = () => {\n  \n initContract().then(\n  ({ contract, currentUser, nearConfig, walletConnection }) => {\n    return(\n      <ThemeProvider theme={theme}>\n      <Home\n        contract={contract}\n        currentUser={currentUser}\n        nearConfig={nearConfig}\n        wallet={walletConnection}\n      />\n    </ThemeProvider>\n    )\n  }\n )\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode> \n    { true && \n    // @ts-ignore\n      <App />\n    }\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}