{"version":3,"sources":["MintButton.tsx","abi.tsx","App.tsx","index.tsx"],"names":["CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","gatewayStatus","requestGatewayToken","useState","clicked","setClicked","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","onClick","variant","CircularProgress","ERC20ABI","addressContract","require","erc20","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","undefined","padding","startIcon","marginRight","endIcon","marginLeft","NFT","div","ul","WalletMultiButton","Paper","MintButtonContainer","MainContainer","a","MintContainer","DesContainer","Price","Chip","Image","img","App","LinearProgress","Big","times","toFixed","props","setp2","totalSupply","setTotalSupply","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","Contract","abi","twophase","then","result","arg","BigInt","mins","Math","ceil","parseFloat","toString","Date","getTime","setLabel","catch","error","x","parseInt","label","howmany","setBalance","mintOneorTwo","value","utils","parseEther","options","gasPrice","gasLimit","from","currentAccount","result2","mintNFT","setCurrentAccount","setChainId","setChainName","provider","getBalance","formatEther","getNetwork","chainId","name","setIsMinting","open","message","severity","setAlertState","startMint","msg","code","indexOf","CTAButton2","ThemeProvider","send","accounts","length","e","elevation","style","fontSize","TextField","placeholder","alignContent","src","alt","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05fa78cf.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\nisMinting\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked \n            }\n            onClick={async () => {\n               \n                    console.log('Minting...');\n                    await onMint();\n            }}\n            variant=\"contained\"\n        >\n\n                    {isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"Mint :)\"\n                    )\n           }\n        </CTAButton>\n    );\n};\n","export const ERC20ABI = [\n    // Read-Only Functions\n    \"function x() view returns (uint256)\",\n    \"function twophase() view returns (uint256)\",\n    // Authenticated Functions\n    \"function mintNFT(address recipient, uint8 num) payable returns (uint256)\",\n];","\nimport styled from \"styled-components\";\nimport BN from 'bn.js';\nimport { Button, Box } from '@material-ui/core'\nimport confetti from \"canvas-confetti\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {toDate, AlertState, getAtaForMint} from './utils';\nimport {MintButton} from './MintButton';\n\nimport 'regenerator-runtime/runtime';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport { createTheme, ThemeProvider, TextField } from \"@material-ui/core\";\n\nimport \"./App.css\";\n\nimport ReactDOM from 'react-dom';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\nimport React, {useEffect, useState } from 'react';\nimport {ERC20ABI as abi} from './abi'\nimport {ethers} from 'ethers'\nimport Countdown from \"react-countdown\";\n\nlet currentAccount = \"\"\nlet addressContract='0x67F07264E665192A0d078217E0c0E55b74D0057a'\n\n\n\ndeclare let window:any\n\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  padding: 5px 5px 5px 16px;\n  border-radius: 42px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color:var(--main-text-color) !important;\n  \n  > div.MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nexport interface HomeProps {\n}\nlet contract: any\nlet provider: any \nlet erc20: any\nconst App = (props: HomeProps) => {\n  \n\nconst [p2,setp2]= useState<string>(\"0\")\nconst [totalSupply, setTotalSupply] = useState<number>(0)\n  useEffect( () => {\n    //if(!window.ethereum) return\n\n     provider = new ethers.providers.Web3Provider(window.ethereum)\n     const signer = provider.getSigner();\n     erc20 = new ethers.Contract(addressContract, abi, signer);\n     erc20.twophase().then((result:string)=>{\n      let arg = ( BigInt(result))\n      let mins = Math.ceil((parseFloat(arg.toString()) - new Date().getTime() / 1000) / 60) // / 1000\n    if (mins > 0){\n      setLabel(mins.toString()  + \" minutes left.\")\n    }\n\n  }).catch('error', console.error)\n    erc20.x().then((result:string)=>{\n        setTotalSupply(parseInt(result))\n    }).catch('error', console.error)\n    erc20.twophase().then((result:string)=>{\n      let arg = ( BigInt(result))\n      console.log(arg)\n      console.log(arg.toString())\n        setp2(arg.toString())\n        \n    }).catch('error', console.error)\n/*\n    erc20.totalSupply().then((result:string)=>{\n        setTotalSupply(ethers.utils.formatEther(result))\n    }).catch('error', console.error); */\n    //called only once\n  },[])  \n\nconst [label, setLabel] = useState<string>(\"\")\n\nconst [howmany, setHowmany] = useState<number>(1)\nfunction onBlarg(e: any){\ntry {\n  e.preventDefault()\n  setHowmany(parseInt(e.target.value))\n  console.log(howmany)\n}\ncatch (err){\nconsole.log(err)\n}\n}\n  const [balance, setBalance] = useState<string | undefined>()\n     function mintOneorTwo(){\n  //  if(!window.ethereum) return\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    const signer = provider.getSigner();\n    erc20 = new ethers.Contract(addressContract, abi, signer);\n    var value = parseInt(ethers.utils.parseEther(\"0.04\").toString()) * howmany\n    var options = { gasPrice: 4380000000, gasLimit: 42000 * 10 * 3 * howmany,value: BigInt( value ),from: currentAccount };\n    erc20.x().then( async (result2:string)=>{\n        let result = parseInt(result2)\n        console.log(currentAccount)\n        // @ts-ignore\n        await erc20.mintNFT(currentAccount, howmany, options);\n\n        //setSymbol(result)\n    }).catch('error', console.error)\n\n}\n\n  const [currentAccount, setCurrentAccount] = useState<string | undefined>()\n  const [chainId, setChainId] = useState<number | undefined>()\n  const [chainname, setChainName] = useState<string | undefined>()\n\n  useEffect(() => {\n   // if(!currentAccount || !ethers.utils.isAddress(currentAccount)) return\n    //client side code\n   // if(!window.ethereum) return\n   if (currentAccount){\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    provider.getBalance(currentAccount).then((result)=>{\n      setBalance(ethers.utils.formatEther(result))\n    })\n    provider.getNetwork().then((result)=>{\n      setChainId(result.chainId)\n      setChainName(result.name)\n    })\n    setCurrentAccount(currentAccount)\n  }\n  },[currentAccount])\n\n  const onClickConnect = () => {\n    //client side code\n    if(!window.ethereum) {\n      console.log(\"please install MetaMask\")\n     // return\n    }\n    /*\n    //change from window.ethereum.enable() which is deprecated\n    //see docs: https://docs.metamask.io/guide/ethereum-provider.html#legacy-methods\n    window.ethereum.request({ method: 'eth_requestAccounts' })\n    .then((accounts:any)=>{\n      if(accounts.length>0) setCurrentAccount(accounts[0])\n    })\n    .catch('error',console.error)\n    */\n\n    //we can do it using ethers.js\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n    // MetaMask requires requesting permission to connect users accounts\n    provider.send(\"eth_requestAccounts\", [])\n    .then((accounts)=>{\n      if(accounts.length>0) setCurrentAccount(accounts[0])\n    })\n    .catch((e)=>console.log(e))\n  }\n\n  const onClickDisconnect = () => {\n    console.log(\"onClickDisConnect\")\n    setBalance(undefined)\n    setCurrentAccount(undefined)\n  }\n\n\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    \n    \n    const [alertState, setAlertState] = useState<AlertState>({\n      open: false,\n      message: \"\",\n      severity: undefined,\n  });\n\n    const startMint = async () => {\n        try {\n            setIsMinting(true);\n            await mintOneorTwo()//quantityString);\n            \n        } catch (error: any) {\n          console.log(error)\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n      function authHandler (err: any, data: any)  {\n        console.log(err, data);\n      }\n    \n    \n const CTAButton2 = styled(Button)`\ndisplay: block !important;\nmargin: 0 auto !important;\nbackground-color: var(--title-text-color) !important;\nmin-width: 120px !important;\nfont-size: 1em !important;\n`;\n    return (\n      <ThemeProvider theme={theme}>\n        <main>\n         \n  <div>\n        {currentAccount  \n          ? <CTAButton2 onClick={onClickDisconnect}>\n                Account:{currentAccount}\n            </CTAButton2>\n          : <CTAButton2  onClick={onClickConnect}>\n                  Connect MetaMask\n              </CTAButton2>\n        }\n        </div>\n  \n              \n\n            <MainContainer>\n                \n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3} >\n                          <div style={{fontSize: \"16px\"}} >\n                        Welcome to Saucebook 10k for 10k Cyberscapes mint. \n                        <br />Exclusive access to Twitter followers for first 24 hours,\n                        <br />and 2 NFTs delivered for every 1 purchased. \n                        <br />Enter your Twitter username without @ in the box below. \n                        <br /> This ensures you receive details of follow up offers and airdrops :)\n                        <br /></div>\n                        @<TextField placeholder=\"saucebook\" style={{alignContent:\"center\"}}\n\n        >saucebook</TextField>\n\n                            <div><Price\n                                label={\"0.04 ETH per unique 1/1 (from set of 10k)\"}  ></Price> \n                                <Image\n                                src=\"cool-cats.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                       \n                              <div style={{color:\"lightblue\"}}>\n                                <h2>{label}</h2>\n        <div><b>Contract</b>: {addressContract}</div>\n        <div><b></b>{totalSupply} / 10000 minted!</div>\n                            <br/>\n                            \n                            <MintButtonContainer> \n                               <br /> {currentAccount   && \n                           \n                            // @ts-ignore\n                                                <MintButton\n                                                    isMinting={isMinting}\n\n                                                    onMint={startMint}\n                                                />\n                            }\n                            </MintButtonContainer>                             </div>\n\n                            </NFT>\n                    </DesContainer>\n                    </MintContainer>\n\n            </MainContainer>\n        </main>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n\n    ReactDOM.render(\n      <App\n      />,\n      document.getElementById('root')\n    );\n  \n"],"sourceRoot":""}